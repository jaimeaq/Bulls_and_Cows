type: edu
files:
  - name: src/bullscows/Main.java
    visible: true
    text: |
      package bullscows;
      
      public class Main {
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: test/BullsCowsTest.java
    visible: false
    text: |-
      import bullscows.Main;
      import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.util.Arrays;
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      public class BullsCowsTest extends StageTest<String> {
      
          // base test with 1 digit number
          @DynamicTestingMethod
          CheckResult test1() {
              TestedProgram main = new TestedProgram();
              main.start();
      
              String output;
              int gotAnswer = 0;
              output = main.execute("1");
      
              for (int i = 0; i <= 9; i++) {
                  if (main.isFinished()) {
                      break; // if game has stopped, stop cycle and start check of results;
                  }
                  output = main.execute(Integer.toString(i));
                  int[] result = getNumOfBullsAndCows(output);
                  if (result[0] == 1) {
                      gotAnswer++; // if got a bull, count for an amount of answers
                  }
              }
      
              // if we got less or more than 1 answer, the program work is incorrect
              if (gotAnswer != 1) {
                  return CheckResult.wrong("The game has no answer or more than one. ");
              }
      
              return CheckResult.correct();
          }
      
          // standard bulls and cows game
          @DynamicTestingMethod
          CheckResult test2() {
              TestedProgram main = new TestedProgram();
              main.start();
              String output = main.execute("4");
      
              Integer[] usedNums = getUsedNumbers(main, 4);
              boolean check = getPermutations(main, 4, usedNums);
      
              if (!check && main.isFinished()) {
                  return CheckResult.wrong("The program has finished before the answer was found");
              }
      
              if (!check) {
                  return CheckResult.wrong("The program tried all possible " +
                          "combinations of digits and hasn't found the answer.");
              }
      
              if (!main.isFinished()) {
                  return CheckResult.wrong("The program didn't finish after " +
                          "the answer was found");
              }
      
              return CheckResult.correct();
          }
      
          // max length we can check
          @DynamicTestingMethod
          CheckResult test3() {
              TestedProgram main = new TestedProgram();
              main.start();
              String output = main.execute("6");
      
              Integer[] usedNums = getUsedNumbers(main, 6);
              boolean check = getPermutations(main, 6, usedNums);
      
              if (!check && main.isFinished()) {
                  return CheckResult.wrong("The program has finished before the answer was found");
              }
      
              if (!check) {
                  return CheckResult.wrong("The program tried all possible " +
                          "combinations of digits and hasn't found the answer.");
              }
      
              if (!main.isFinished()) {
                  return CheckResult.wrong("The program didn't finish after " +
                          "the answer was found");
              }
      
              return CheckResult.correct();
          }
      
          // length limit check
          @DynamicTestingMethod
          CheckResult test4() {
              TestedProgram main = new TestedProgram();
              main.start();
              String output = main.execute("11");
      
              if (output.toLowerCase().contains("error")) {
                  return CheckResult.correct();
              } else {
                  return CheckResult.wrong("An error message expected with input \"11\"");
              }
          }
      
          Integer[] getUsedNumbers(TestedProgram main, int length) {
              Integer[] nums = new Integer[length];
              int[] result;
      
              int index = 0;
              String output;
              String input;
      
              for (int i = 0; i < 10; i++) {
                  input = new String(new char[length]).replace("\0", Integer.toString(i));
                  output = main.execute(input);
                  result = getNumOfBullsAndCows(output);
      
                  if (result[0] > 1) {
                      throw new WrongAnswer("Seems like " +
                              "the calculation of bulls isn't right. " +
                              "For the guess \"" + input + "\" there can be 1 bull at max.");
                  }
      
                  if (result[0] == 1) {
                      nums[index++] = i;
                  }
                  if (index == length) {
                      break;
                  }
              }
      
              if (index != length) {
                  throw new WrongAnswer(
                          "Output should contain " + length + " bulls " +
                          "summarized as every option was tried. Found: " + index
                  );
              }
      
              return nums;
          }
      
      
          // permutations one by one
          public boolean getPermutations(TestedProgram main, int length, Integer[] elements) {
              int[] indexes = new int[length];
              for (int i = 0; i < length; i++) {
                  indexes[i] = 0;
              }
      
              String output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
              int[] result = getNumOfBullsAndCows(output);
              if (result[0] == length) {
                  return true;
              }
      
              int i = 0;
              while (i < length) {
                  if (indexes[i] < i) {
                      swap(elements, i % 2 == 0 ? 0 : indexes[i], i);
                      output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
                      result = getNumOfBullsAndCows(output);
                      if (result[0] == length) {
                          return true;
                      }
                      indexes[i]++;
                      i = 0;
                  } else {
                      indexes[i] = 0;
                      i++;
                  }
              }
              return false;
          }
      
          private static void swap(Integer[] input, int a, int b) {
              int tmp = input[a];
              input[a] = input[b];
              input[b] = tmp;
          }
      
      
          // get number of bulls and cows from user program's output
          int[] getNumOfBullsAndCows(String userString) {
              Matcher nonePattern = Pattern.compile("\\b[nN]one\\b").matcher(userString);
              Matcher cowsPattern = Pattern.compile("\\b\\d [cC]ow").matcher(userString);
              Matcher bullsPattern = Pattern.compile("\\b\\d [bB]ull").matcher(userString);
              Pattern oneNumPattern = Pattern.compile("\\d");
      
              if (nonePattern.find()) {
                  return new int[]{0, 0};
              }
      
              int[] ans = {0, 0};
              boolean found = false;
      
              if (bullsPattern.find()) {
                  String temp = bullsPattern.group();
                  Matcher oneNumBulls = oneNumPattern.matcher(temp);
                  oneNumBulls.find();
                  ans[0] = Integer.parseInt(oneNumBulls.group());
                  found = true;
              }
      
              if (cowsPattern.find()) {
                  String temp = cowsPattern.group();
                  Matcher oneNumCows = oneNumPattern.matcher(temp);
                  oneNumCows.find();
                  ans[1] = Integer.parseInt(oneNumCows.group());
                  found = true;
              }
      
              if (!found) {
                  throw new WrongAnswer(
                          "Cannot find number of bulls or number of cows or None after the input."
                  );
              }
      
              return ans;
          }
      }
    learner_created: false
  - name: src/bullscows/SecretCode.java
    visible: true
    text: |-
      package bullscows;
      
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Scanner;
      
      public class SecretCode {
          private final int secretCode;
          private final int length;
          private Scanner s;
          public boolean isValid = false;
      
          public SecretCode(int length, Scanner s) {
              this.s = s;
              this.secretCode = generateCode(length);
              this.length = length;
          }
      
          private int generateCode(int length) {
              int validLength = getValidInputLength(length);
      
              return generateRndNumber(validLength);
          }
      
          private int getValidInputLength(int length) {
              while(true) {
                  if (length > 0 && length < 10) {
                      return length;
                  }
                  System.out.println("Error: can't generate a secret number with a length of " + length +
                          " because there aren't enough unique digits.");
                  length = Integer.parseInt(s.nextLine());
              }
          }
      
          private int generateRndNumber(int length) {
              StringBuilder sb = new StringBuilder();
              while(!this.isValid) {
                  long longSeed = System.nanoTime();
                  sb.delete(0, sb.length());
                  List<Character> usedNumbers = new ArrayList<>();
      
                  for (int i = 15; i >= 0; i--) {
                      char currChar = Long.toString(longSeed).charAt(i);
                      if (currChar == '0' && usedNumbers.isEmpty()) {
                          continue;
                      }
                      if (!usedNumbers.contains(currChar)) {
                          usedNumbers.add(currChar);
                          sb.append(currChar);
                      }
                      if (usedNumbers.size() == length) {
                          this.isValid = true;
                          break;
                      }
                  }
              }
              return Integer.parseInt(sb.toString());
          }
          public int getInt() { return secretCode; }
      
          public String getString() {
              return "" + secretCode;
          }
      
          public int getLength() {
              return length;
          }
      }
    learner_created: true
  - name: src/bullscows/Game.java
    visible: true
    text: |
      package bullscows;
      
      import java.util.Scanner;
      
      public class Game {
          private SecretCode sc;
          private boolean isOver = false;
          int turn = 1;
      
          void start() {
              Scanner s = new Scanner(System.in);
              System.out.println("Please, enter the secret code's length:");
              this.sc = new SecretCode(Integer.parseInt(s.nextLine()), s);
      
              System.out.println("Okay, let's start a game!");
      
              while(!isOver) {
                  System.out.println("Turn " + turn + ":");
                  UserInput userInput = new UserInput(s.nextLine());
                  Grade grade = new Grade(userInput, sc.getString());
                  System.out.println(grade);
                  turn++;
      
                  if(grade.getBulls() == sc.getLength()) {
                      isOver = true;
                      System.out.println("Congratulations! You guessed the secret code.");
                  }
              }
              s.close();
          }
      }
    learner_created: true
  - name: src/bullscows/Grade.java
    visible: true
    text: |-
      package bullscows;
      
      public class Grade {
          private final UserInput userInput;
          private final int bulls;
          private final int cows;
          private final String secretCode;
      
          public Grade(UserInput userInput, String secretCode) {
              this.userInput = userInput;
              this.secretCode = secretCode;
              this.bulls = calculateBulls();
              this.cows = calculateCows();
          }
      
          private int calculateBulls() {
              int bullsCount = 0;
              for(int i = 0; i < secretCode.length(); i++) {
                  if (secretCode.charAt(i) == userInput.get().charAt(i)) {
                      bullsCount++;
                  }
              }
              return bullsCount;
          }
      
          private int calculateCows() {
              int cowsCount = 0;
              for(int i = 0; i < userInput.get().length(); i++) {
                  for (int j = 0; j < secretCode.length(); j++) {
                      if (i == j) {
                          continue;
                      }
                      if (userInput.get().charAt(i) == secretCode.charAt(j)) {
                          cowsCount++;
                          break;
                      }
                  }
              }
              return cowsCount;
          }
      
          @Override
          public String toString() {
              StringBuilder sb = new StringBuilder();
              sb.append("Grade: ");
              if (bulls == 0 && cows == 0) {
                  sb.append("None. The secret code is ").append(secretCode).append(".");
                  return sb.toString();
              }
              if(bulls > 0) {
                  sb.append(bulls).append(" bull(s)");
              }
              if(bulls > 0 && cows > 0) {
                  sb.append(" and ");
              }
              if(cows > 0) {
                  sb.append(cows).append(" cow(s)");
              }
              sb.append(".");
      
              return sb.toString();
          }
      
          public int getBulls() {
              return bulls;
          }
      }
    learner_created: true
  - name: src/bullscows/UserInput.java
    visible: true
    text: |
      package bullscows;
      
      public class UserInput {
          private final String userInput;
          public UserInput(String s) {
              userInput = s;
          }
      
          public String get() {
              return userInput;
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5433#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 07 Mar 2024 19:17:28 UTC"
record: 5
